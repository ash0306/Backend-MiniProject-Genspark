// <auto-generated />
using System;
using CoffeeStoreApplication.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeStoreApplication.Migrations
{
    [DbContext(typeof(CoffeeStoreContext))]
    [Migration("20240523053311_UpdateModels")]
    partial class UpdateModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeStoreApplication.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            DateOfBirth = new DateTime(2000, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andrew@gmail.com",
                            HashedPassword = new byte[] { 98, 180, 12, 86, 55, 36, 143, 114, 208, 119, 157, 40, 34, 86, 146, 29, 254, 171, 58, 131, 179, 187, 246, 4, 126, 129, 224, 57, 55, 35, 5, 67, 233, 113, 98, 41, 127, 86, 182, 143, 63, 87, 115, 245, 6, 191, 49, 130, 211, 245, 201, 3, 66, 73, 107, 228, 151, 50, 241, 235, 222, 15, 182, 186 },
                            LoyaltyPoints = 0,
                            Name = "Andrew",
                            PasswordHashKey = new byte[] { 246, 23, 8, 132, 94, 193, 194, 10, 176, 176, 170, 209, 121, 5, 244, 114, 246, 222, 38, 216, 156, 72, 130, 169, 213, 211, 11, 224, 80, 194, 82, 81, 72, 125, 128, 248, 156, 115, 70, 189, 214, 44, 176, 107, 240, 75, 162, 162, 50, 132, 224, 82, 36, 147, 10, 146, 75, 39, 112, 247, 229, 87, 227, 127, 214, 82, 158, 172, 37, 66, 48, 35, 183, 163, 11, 162, 40, 200, 76, 70, 147, 38, 17, 49, 31, 216, 216, 87, 22, 186, 186, 185, 238, 3, 78, 243, 14, 143, 121, 250, 49, 7, 252, 106, 27, 44, 107, 106, 188, 118, 221, 5, 27, 220, 30, 151, 28, 48, 244, 251, 252, 197, 59, 107, 220, 157, 121, 183 },
                            Phone = "9891278439"
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 201,
                            DateOfBirth = new DateTime(1997, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abby@gmail.com",
                            HashedPassword = new byte[] { 208, 111, 5, 93, 171, 68, 132, 196, 188, 116, 48, 254, 139, 180, 108, 116, 172, 28, 111, 133, 43, 124, 17, 139, 254, 97, 209, 55, 140, 190, 71, 9, 159, 149, 1, 4, 133, 120, 56, 107, 243, 8, 182, 132, 17, 120, 158, 92, 53, 80, 165, 190, 42, 24, 221, 72, 33, 58, 25, 48, 166, 134, 132, 15 },
                            Name = "Abby",
                            PasswordHashKey = new byte[] { 246, 23, 8, 132, 94, 193, 194, 10, 176, 176, 170, 209, 121, 5, 244, 114, 246, 222, 38, 216, 156, 72, 130, 169, 213, 211, 11, 224, 80, 194, 82, 81, 72, 125, 128, 248, 156, 115, 70, 189, 214, 44, 176, 107, 240, 75, 162, 162, 50, 132, 224, 82, 36, 147, 10, 146, 75, 39, 112, 247, 229, 87, 227, 127, 214, 82, 158, 172, 37, 66, 48, 35, 183, 163, 11, 162, 40, 200, 76, 70, 147, 38, 17, 49, 31, 216, 216, 87, 22, 186, 186, 185, 238, 3, 78, 243, 14, 143, 121, 250, 49, 7, 252, 106, 27, 44, 107, 106, 188, 118, 221, 5, 27, 220, 30, 151, 28, 48, 244, 251, 252, 197, 59, 107, 220, 157, 121, 183 },
                            Phone = "9876543298",
                            Role = 0,
                            Salary = 60000f,
                            Status = 1
                        },
                        new
                        {
                            Id = 202,
                            DateOfBirth = new DateTime(1995, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david@gmail.com",
                            HashedPassword = new byte[] { 96, 241, 157, 193, 224, 1, 47, 66, 109, 87, 9, 188, 19, 69, 167, 181, 140, 223, 127, 243, 44, 145, 127, 126, 234, 141, 154, 122, 102, 18, 78, 194, 96, 161, 89, 92, 38, 179, 73, 196, 136, 122, 42, 247, 35, 81, 13, 48, 190, 57, 89, 48, 220, 70, 222, 116, 4, 105, 215, 235, 151, 139, 248, 155 },
                            Name = "David",
                            PasswordHashKey = new byte[] { 246, 23, 8, 132, 94, 193, 194, 10, 176, 176, 170, 209, 121, 5, 244, 114, 246, 222, 38, 216, 156, 72, 130, 169, 213, 211, 11, 224, 80, 194, 82, 81, 72, 125, 128, 248, 156, 115, 70, 189, 214, 44, 176, 107, 240, 75, 162, 162, 50, 132, 224, 82, 36, 147, 10, 146, 75, 39, 112, 247, 229, 87, 227, 127, 214, 82, 158, 172, 37, 66, 48, 35, 183, 163, 11, 162, 40, 200, 76, 70, 147, 38, 17, 49, 31, 216, 216, 87, 22, 186, 186, 185, 238, 3, 78, 243, 14, 143, 121, 250, 49, 7, 252, 106, 27, 44, 107, 106, 188, 118, 221, 5, 27, 220, 30, 151, 28, 48, 244, 251, 252, 197, 59, 107, 220, 157, 121, 183 },
                            Phone = "9988776655",
                            Role = 0,
                            Salary = 80000f,
                            Status = 1
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("LoyaltyPointsDiscount")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<bool>("UseLoyaltyPoints")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 301,
                            Category = "Hot Drinks",
                            Description = "A strong, full-bodied coffee made with finely ground coffee beans and brewed under high pressure. Perfect for a quick energy boost.",
                            Name = "Espresso",
                            Price = 100f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 302,
                            Category = "Hot Drinks",
                            Description = "A classic Italian coffee drink made with equal parts espresso, steamed milk, and foamed milk. Smooth and creamy with a rich flavor.",
                            Name = "Cappuccino",
                            Price = 130f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 303,
                            Category = "Cold Drinks",
                            Description = "A refreshing iced coffee made by combining rich espresso with cold water and ice. A perfect drink for coffee lovers to enjoy on a hot day.",
                            Name = "Iced Americano",
                            Price = 110f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 304,
                            Category = "Snacks",
                            Description = "A delicious sandwich filled with fresh vegetables, cheese, and a hint of seasoning. Ideal for a quick and healthy snack.",
                            Name = "Veg Sandwich",
                            Price = 120f,
                            Status = 1,
                            Stock = 50
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.CustomerOrder", b =>
                {
                    b.HasOne("CoffeeStoreApplication.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreApplication.Models.Order", "order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("order");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.OrderItem", b =>
                {
                    b.HasOne("CoffeeStoreApplication.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoffeeStoreApplication.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
