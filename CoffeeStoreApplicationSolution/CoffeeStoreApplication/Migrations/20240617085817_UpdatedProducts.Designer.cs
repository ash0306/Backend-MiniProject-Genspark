// <auto-generated />
using System;
using CoffeeStoreApplication.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeStoreApplication.Migrations
{
    [DbContext(typeof(CoffeeStoreContext))]
    [Migration("20240617085817_UpdatedProducts")]
    partial class UpdatedProducts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeStoreApplication.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            DateOfBirth = new DateTime(2000, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andrew@gmail.com",
                            HashedPassword = new byte[] { 27, 226, 177, 168, 101, 104, 223, 216, 175, 212, 15, 118, 148, 112, 145, 13, 55, 222, 203, 240, 125, 15, 196, 246, 110, 166, 216, 221, 12, 106, 209, 30, 241, 54, 78, 138, 191, 31, 41, 116, 57, 95, 77, 175, 74, 0, 170, 109, 6, 66, 57, 28, 221, 42, 199, 253, 57, 181, 155, 84, 2, 104, 71, 36 },
                            LoyaltyPoints = 0,
                            Name = "Andrew",
                            PasswordHashKey = new byte[] { 115, 34, 117, 158, 170, 23, 32, 46, 217, 196, 98, 115, 196, 197, 209, 128, 216, 204, 31, 22, 247, 7, 207, 233, 208, 186, 254, 1, 126, 37, 41, 148, 222, 195, 234, 137, 120, 249, 169, 28, 182, 90, 56, 2, 193, 201, 233, 56, 198, 232, 177, 234, 89, 178, 169, 20, 209, 56, 247, 202, 244, 24, 73, 66, 220, 16, 171, 235, 164, 152, 157, 198, 184, 160, 182, 255, 21, 231, 79, 41, 209, 155, 143, 35, 16, 235, 120, 56, 118, 232, 89, 32, 102, 79, 88, 159, 186, 206, 176, 72, 86, 43, 55, 162, 36, 187, 202, 55, 224, 102, 223, 78, 3, 107, 80, 164, 98, 190, 231, 215, 100, 44, 69, 126, 72, 32, 44, 175 },
                            Phone = "9891278439"
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<float?>("Salary")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 201,
                            DateOfBirth = new DateTime(1997, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abby@gmail.com",
                            HashedPassword = new byte[] { 86, 198, 95, 88, 88, 162, 172, 96, 238, 70, 56, 37, 35, 2, 209, 209, 43, 223, 86, 144, 249, 173, 3, 100, 15, 228, 109, 214, 204, 218, 173, 193, 103, 43, 120, 72, 136, 220, 49, 112, 63, 235, 163, 11, 42, 189, 9, 66, 51, 126, 144, 81, 33, 179, 208, 223, 250, 247, 168, 242, 148, 44, 173, 83 },
                            Name = "Abby",
                            PasswordHashKey = new byte[] { 115, 34, 117, 158, 170, 23, 32, 46, 217, 196, 98, 115, 196, 197, 209, 128, 216, 204, 31, 22, 247, 7, 207, 233, 208, 186, 254, 1, 126, 37, 41, 148, 222, 195, 234, 137, 120, 249, 169, 28, 182, 90, 56, 2, 193, 201, 233, 56, 198, 232, 177, 234, 89, 178, 169, 20, 209, 56, 247, 202, 244, 24, 73, 66, 220, 16, 171, 235, 164, 152, 157, 198, 184, 160, 182, 255, 21, 231, 79, 41, 209, 155, 143, 35, 16, 235, 120, 56, 118, 232, 89, 32, 102, 79, 88, 159, 186, 206, 176, 72, 86, 43, 55, 162, 36, 187, 202, 55, 224, 102, 223, 78, 3, 107, 80, 164, 98, 190, 231, 215, 100, 44, 69, 126, 72, 32, 44, 175 },
                            Phone = "9876543298",
                            Role = 0,
                            Salary = 60000f,
                            Status = 1
                        },
                        new
                        {
                            Id = 202,
                            DateOfBirth = new DateTime(1995, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david@gmail.com",
                            HashedPassword = new byte[] { 184, 189, 106, 164, 161, 250, 247, 4, 206, 126, 233, 61, 80, 106, 108, 197, 10, 35, 70, 106, 238, 248, 131, 126, 73, 91, 138, 212, 255, 230, 176, 123, 97, 167, 140, 141, 248, 248, 173, 205, 92, 175, 230, 214, 121, 122, 225, 156, 23, 232, 158, 195, 134, 38, 153, 197, 26, 111, 143, 239, 195, 160, 3, 38 },
                            Name = "David",
                            PasswordHashKey = new byte[] { 115, 34, 117, 158, 170, 23, 32, 46, 217, 196, 98, 115, 196, 197, 209, 128, 216, 204, 31, 22, 247, 7, 207, 233, 208, 186, 254, 1, 126, 37, 41, 148, 222, 195, 234, 137, 120, 249, 169, 28, 182, 90, 56, 2, 193, 201, 233, 56, 198, 232, 177, 234, 89, 178, 169, 20, 209, 56, 247, 202, 244, 24, 73, 66, 220, 16, 171, 235, 164, 152, 157, 198, 184, 160, 182, 255, 21, 231, 79, 41, 209, 155, 143, 35, 16, 235, 120, 56, 118, 232, 89, 32, 102, 79, 88, 159, 186, 206, 176, 72, 86, 43, 55, 162, 36, 187, 202, 55, 224, 102, 223, 78, 3, 107, 80, 164, 98, 190, 231, 215, 100, 44, 69, 126, 72, 32, 44, 175 },
                            Phone = "9988776655",
                            Role = 0,
                            Salary = 80000f,
                            Status = 1
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float?>("LoyaltyPointsDiscount")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<bool>("UseLoyaltyPoints")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 301,
                            Category = 0,
                            Description = "A strong, full-bodied coffee made with finely ground coffee beans and brewed under high pressure. Perfect for a quick energy boost.",
                            Image = "https://img.freepik.com/free-vector/realistic-cup-black-brewed-coffee-saucer-vector-illustration_1284-66002.jpg?t=st=1718614373~exp=1718617973~hmac=a5c17f4a2e84d0f7b60ef86b88bb2776f8d0aa34a46139ea578010a7d37517a1&w=740",
                            Name = "Espresso",
                            Price = 100f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 302,
                            Category = 0,
                            Description = "A classic Italian coffee drink made with equal parts espresso, steamed milk, and foamed milk. Smooth and creamy with a rich flavor.",
                            Image = "https://images.unsplash.com/photo-1602320574582-741740d4fcd7?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Name = "Cappuccino",
                            Price = 130f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 303,
                            Category = 1,
                            Description = "A refreshing iced coffee made by combining rich espresso with cold water and ice. A perfect drink for coffee lovers to enjoy on a hot day.",
                            Image = "https://images.unsplash.com/photo-1581996323441-538096e854b9?q=80&w=1936&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Name = "Iced Americano",
                            Price = 110f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 304,
                            Category = 2,
                            Description = "A delicious sandwich filled with fresh vegetables, cheese, and a hint of seasoning. Ideal for a quick and healthy snack.",
                            Image = "https://plus.unsplash.com/premium_photo-1671559021919-19d9610c8cad?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Name = "Veg Sandwich",
                            Price = 120f,
                            Status = 1,
                            Stock = 50
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.CustomerOrder", b =>
                {
                    b.HasOne("CoffeeStoreApplication.Models.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoffeeStoreApplication.Models.Order", "Order")
                        .WithOne("CustomerOrder")
                        .HasForeignKey("CoffeeStoreApplication.Models.CustomerOrder", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.OrderItem", b =>
                {
                    b.HasOne("CoffeeStoreApplication.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoffeeStoreApplication.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Customer", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Order", b =>
                {
                    b.Navigation("CustomerOrder")
                        .IsRequired();

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
