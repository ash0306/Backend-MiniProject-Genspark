// <auto-generated />
using System;
using CoffeeStoreApplication.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeStoreApplication.Migrations
{
    [DbContext(typeof(CoffeeStoreContext))]
    [Migration("20240524030943_UpdatedEmployeeModel")]
    partial class UpdatedEmployeeModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeStoreApplication.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            DateOfBirth = new DateTime(2000, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andrew@gmail.com",
                            HashedPassword = new byte[] { 45, 96, 252, 141, 163, 211, 188, 99, 229, 136, 141, 119, 39, 22, 39, 85, 155, 29, 60, 33, 243, 169, 30, 29, 215, 113, 74, 67, 83, 234, 61, 60, 56, 60, 222, 102, 2, 25, 161, 192, 62, 101, 11, 173, 14, 82, 140, 144, 12, 36, 14, 129, 110, 28, 194, 86, 237, 187, 27, 156, 224, 52, 113, 3 },
                            LoyaltyPoints = 0,
                            Name = "Andrew",
                            PasswordHashKey = new byte[] { 27, 250, 99, 117, 233, 253, 101, 139, 97, 102, 254, 134, 72, 164, 99, 208, 79, 0, 202, 34, 58, 208, 58, 0, 212, 200, 80, 11, 18, 165, 115, 49, 151, 31, 77, 173, 56, 0, 211, 35, 18, 234, 178, 41, 182, 182, 45, 252, 66, 223, 8, 145, 37, 69, 233, 163, 176, 135, 221, 190, 31, 189, 187, 187, 132, 216, 64, 247, 122, 208, 203, 136, 52, 0, 215, 245, 164, 137, 188, 20, 139, 133, 82, 39, 58, 30, 130, 99, 76, 181, 13, 16, 118, 248, 206, 190, 237, 219, 180, 153, 127, 134, 24, 166, 225, 78, 80, 48, 199, 249, 209, 62, 13, 237, 68, 50, 16, 185, 255, 221, 173, 146, 233, 62, 0, 87, 72, 200 },
                            Phone = "9891278439"
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<float?>("Salary")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 201,
                            DateOfBirth = new DateTime(1997, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abby@gmail.com",
                            HashedPassword = new byte[] { 210, 196, 68, 43, 179, 124, 207, 196, 186, 97, 15, 14, 252, 14, 19, 148, 69, 219, 3, 57, 248, 246, 46, 217, 5, 142, 99, 30, 174, 28, 19, 185, 140, 211, 127, 216, 233, 135, 229, 247, 59, 87, 186, 103, 66, 224, 212, 223, 190, 217, 90, 1, 177, 118, 15, 225, 223, 93, 196, 26, 75, 212, 52, 164 },
                            Name = "Abby",
                            PasswordHashKey = new byte[] { 27, 250, 99, 117, 233, 253, 101, 139, 97, 102, 254, 134, 72, 164, 99, 208, 79, 0, 202, 34, 58, 208, 58, 0, 212, 200, 80, 11, 18, 165, 115, 49, 151, 31, 77, 173, 56, 0, 211, 35, 18, 234, 178, 41, 182, 182, 45, 252, 66, 223, 8, 145, 37, 69, 233, 163, 176, 135, 221, 190, 31, 189, 187, 187, 132, 216, 64, 247, 122, 208, 203, 136, 52, 0, 215, 245, 164, 137, 188, 20, 139, 133, 82, 39, 58, 30, 130, 99, 76, 181, 13, 16, 118, 248, 206, 190, 237, 219, 180, 153, 127, 134, 24, 166, 225, 78, 80, 48, 199, 249, 209, 62, 13, 237, 68, 50, 16, 185, 255, 221, 173, 146, 233, 62, 0, 87, 72, 200 },
                            Phone = "9876543298",
                            Role = 0,
                            Salary = 60000f,
                            Status = 1
                        },
                        new
                        {
                            Id = 202,
                            DateOfBirth = new DateTime(1995, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david@gmail.com",
                            HashedPassword = new byte[] { 119, 186, 106, 109, 236, 179, 135, 11, 62, 235, 125, 75, 34, 82, 128, 54, 75, 100, 16, 90, 10, 54, 191, 3, 16, 73, 174, 42, 128, 148, 92, 82, 115, 14, 162, 172, 206, 102, 88, 254, 99, 122, 86, 192, 204, 249, 93, 218, 246, 103, 166, 225, 163, 223, 159, 137, 17, 250, 229, 183, 245, 204, 40, 37 },
                            Name = "David",
                            PasswordHashKey = new byte[] { 27, 250, 99, 117, 233, 253, 101, 139, 97, 102, 254, 134, 72, 164, 99, 208, 79, 0, 202, 34, 58, 208, 58, 0, 212, 200, 80, 11, 18, 165, 115, 49, 151, 31, 77, 173, 56, 0, 211, 35, 18, 234, 178, 41, 182, 182, 45, 252, 66, 223, 8, 145, 37, 69, 233, 163, 176, 135, 221, 190, 31, 189, 187, 187, 132, 216, 64, 247, 122, 208, 203, 136, 52, 0, 215, 245, 164, 137, 188, 20, 139, 133, 82, 39, 58, 30, 130, 99, 76, 181, 13, 16, 118, 248, 206, 190, 237, 219, 180, 153, 127, 134, 24, 166, 225, 78, 80, 48, 199, 249, 209, 62, 13, 237, 68, 50, 16, 185, 255, 221, 173, 146, 233, 62, 0, 87, 72, 200 },
                            Phone = "9988776655",
                            Role = 0,
                            Salary = 80000f,
                            Status = 1
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("LoyaltyPointsDiscount")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<bool>("UseLoyaltyPoints")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 301,
                            Category = "Hot Drinks",
                            Description = "A strong, full-bodied coffee made with finely ground coffee beans and brewed under high pressure. Perfect for a quick energy boost.",
                            Name = "Espresso",
                            Price = 100f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 302,
                            Category = "Hot Drinks",
                            Description = "A classic Italian coffee drink made with equal parts espresso, steamed milk, and foamed milk. Smooth and creamy with a rich flavor.",
                            Name = "Cappuccino",
                            Price = 130f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 303,
                            Category = "Cold Drinks",
                            Description = "A refreshing iced coffee made by combining rich espresso with cold water and ice. A perfect drink for coffee lovers to enjoy on a hot day.",
                            Name = "Iced Americano",
                            Price = 110f,
                            Status = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 304,
                            Category = "Snacks",
                            Description = "A delicious sandwich filled with fresh vegetables, cheese, and a hint of seasoning. Ideal for a quick and healthy snack.",
                            Name = "Veg Sandwich",
                            Price = 120f,
                            Status = 1,
                            Stock = 50
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.CustomerOrder", b =>
                {
                    b.HasOne("CoffeeStoreApplication.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreApplication.Models.Order", "order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("order");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.OrderItem", b =>
                {
                    b.HasOne("CoffeeStoreApplication.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoffeeStoreApplication.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
