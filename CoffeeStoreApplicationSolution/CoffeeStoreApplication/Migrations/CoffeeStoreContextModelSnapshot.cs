// <auto-generated />
using System;
using CoffeeStoreApplication.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeStoreApplication.Migrations
{
    [DbContext(typeof(CoffeeStoreContext))]
    partial class CoffeeStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoffeeStoreApplication.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            DateOfBirth = new DateTime(2000, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andrew@gmail.com",
                            HashedPassword = new byte[] { 11, 103, 150, 55, 87, 140, 53, 59, 215, 45, 214, 74, 27, 165, 200, 115, 0, 69, 1, 211, 124, 104, 212, 3, 130, 226, 105, 30, 214, 207, 67, 72, 193, 174, 128, 25, 200, 149, 3, 98, 48, 243, 154, 179, 176, 119, 83, 112, 219, 222, 5, 120, 56, 45, 208, 242, 253, 26, 243, 173, 247, 23, 78, 136 },
                            LoyaltyPoints = 0,
                            Name = "Andrew",
                            PasswordHashKey = new byte[] { 9, 189, 88, 149, 122, 116, 222, 4, 55, 251, 47, 135, 188, 98, 248, 179, 130, 191, 9, 225, 137, 79, 2, 65, 82, 42, 143, 126, 63, 1, 50, 172, 168, 45, 3, 149, 79, 99, 242, 207, 174, 13, 30, 128, 177, 119, 63, 9, 114, 46, 250, 156, 191, 171, 228, 77, 199, 154, 48, 201, 251, 43, 98, 54, 124, 12, 121, 220, 90, 191, 253, 44, 191, 50, 129, 254, 236, 160, 249, 39, 44, 91, 244, 205, 93, 129, 97, 91, 17, 82, 0, 111, 94, 111, 37, 40, 78, 166, 131, 68, 199, 183, 154, 139, 45, 92, 249, 183, 136, 81, 157, 36, 71, 238, 45, 129, 242, 42, 66, 218, 71, 169, 156, 197, 187, 146, 69, 69 },
                            Phone = "9891278439"
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 201,
                            DateOfBirth = new DateTime(1997, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "abby@gmail.com",
                            HashedPassword = new byte[] { 38, 52, 181, 36, 132, 111, 193, 227, 152, 110, 144, 249, 132, 48, 81, 168, 25, 239, 77, 26, 72, 231, 83, 31, 116, 209, 148, 9, 0, 217, 66, 159, 17, 141, 128, 166, 201, 86, 70, 89, 206, 142, 66, 34, 190, 68, 161, 209, 123, 42, 105, 252, 229, 101, 80, 83, 9, 234, 86, 118, 43, 63, 11, 142 },
                            Name = "Abby",
                            PasswordHashKey = new byte[] { 9, 189, 88, 149, 122, 116, 222, 4, 55, 251, 47, 135, 188, 98, 248, 179, 130, 191, 9, 225, 137, 79, 2, 65, 82, 42, 143, 126, 63, 1, 50, 172, 168, 45, 3, 149, 79, 99, 242, 207, 174, 13, 30, 128, 177, 119, 63, 9, 114, 46, 250, 156, 191, 171, 228, 77, 199, 154, 48, 201, 251, 43, 98, 54, 124, 12, 121, 220, 90, 191, 253, 44, 191, 50, 129, 254, 236, 160, 249, 39, 44, 91, 244, 205, 93, 129, 97, 91, 17, 82, 0, 111, 94, 111, 37, 40, 78, 166, 131, 68, 199, 183, 154, 139, 45, 92, 249, 183, 136, 81, 157, 36, 71, 238, 45, 129, 242, 42, 66, 218, 71, 169, 156, 197, 187, 146, 69, 69 },
                            Phone = "9876543298",
                            Role = 0,
                            Salary = 60000f,
                            Status = 0
                        },
                        new
                        {
                            Id = 202,
                            DateOfBirth = new DateTime(1995, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david@gmail.com",
                            HashedPassword = new byte[] { 199, 19, 184, 236, 241, 213, 178, 109, 139, 16, 138, 246, 28, 116, 163, 0, 209, 109, 187, 31, 182, 203, 227, 103, 47, 17, 231, 229, 202, 68, 95, 35, 248, 134, 149, 57, 52, 252, 147, 211, 12, 50, 194, 124, 114, 141, 49, 206, 253, 236, 108, 141, 87, 136, 217, 1, 138, 179, 190, 189, 133, 4, 31, 77 },
                            Name = "David",
                            PasswordHashKey = new byte[] { 9, 189, 88, 149, 122, 116, 222, 4, 55, 251, 47, 135, 188, 98, 248, 179, 130, 191, 9, 225, 137, 79, 2, 65, 82, 42, 143, 126, 63, 1, 50, 172, 168, 45, 3, 149, 79, 99, 242, 207, 174, 13, 30, 128, 177, 119, 63, 9, 114, 46, 250, 156, 191, 171, 228, 77, 199, 154, 48, 201, 251, 43, 98, 54, 124, 12, 121, 220, 90, 191, 253, 44, 191, 50, 129, 254, 236, 160, 249, 39, 44, 91, 244, 205, 93, 129, 97, 91, 17, 82, 0, 111, 94, 111, 37, 40, 78, 166, 131, 68, 199, 183, 154, 139, 45, 92, 249, 183, 136, 81, 157, 36, 71, 238, 45, 129, 242, 42, 66, 218, 71, 169, 156, 197, 187, 146, 69, 69 },
                            Phone = "9988776655",
                            Role = 0,
                            Salary = 80000f,
                            Status = 0
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<float>("LoyaltyPointsDiscount")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<bool>("UseLoyaltyPoints")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 301,
                            Category = "Hot Drinks",
                            Description = "A strong, full-bodied coffee made with finely ground coffee beans and brewed under high pressure. Perfect for a quick energy boost.",
                            Name = "Espresso",
                            Price = 100f,
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = 302,
                            Category = "Hot Drinks",
                            Description = "A classic Italian coffee drink made with equal parts espresso, steamed milk, and foamed milk. Smooth and creamy with a rich flavor.",
                            Name = "Cappuccino",
                            Price = 130f,
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = 303,
                            Category = "Cold Drinks",
                            Description = "A refreshing iced coffee made by combining rich espresso with cold water and ice. A perfect drink for coffee lovers to enjoy on a hot day.",
                            Name = "Iced Americano",
                            Price = 110f,
                            Status = 0,
                            Stock = 50
                        },
                        new
                        {
                            Id = 304,
                            Category = "Snacks",
                            Description = "A delicious sandwich filled with fresh vegetables, cheese, and a hint of seasoning. Ideal for a quick and healthy snack.",
                            Name = "Veg Sandwich",
                            Price = 120f,
                            Status = 0,
                            Stock = 50
                        });
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.CustomerOrder", b =>
                {
                    b.HasOne("CoffeeStoreApplication.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeStoreApplication.Models.Order", "order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("order");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.OrderItem", b =>
                {
                    b.HasOne("CoffeeStoreApplication.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoffeeStoreApplication.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeStoreApplication.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
